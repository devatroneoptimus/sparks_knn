# -*- coding: utf-8 -*-
"""sparks knn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-i55-l4zIhIQ5yU43w_02DocIc7CqBfH
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn import datasets
iris = datasets.load_iris()
iris_df = pd.DataFrame(iris.data, columns = iris.feature_names)
iris_df.head()

x = iris_df.iloc[:, [0, 1, 2, 3]].values

from sklearn.cluster import KMeans
sq_error= []

for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++',
                    max_iter = 300, n_init = 10, random_state = 0)
    kmeans.fit(x)
    sq_error.append(kmeans.inertia_)

# Plotting the elbow method
plt.plot(range(1, 11),sq_error)
plt.title('The elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('Sq_error') # Within cluster sum of squares
plt.show()

kmeans = KMeans(n_clusters = 3, init = 'k-means++',
                max_iter = 300, n_init = 10, random_state = 0)
y_kmeans = kmeans.fit_predict(x)

plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1],
            s = 10, c = 'red', label = 'Iris-setosa')
plt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1],
            s = 10, c = 'blue', label = 'Iris-versicolour')
plt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1],
            s = 10, c = 'green', label = 'Iris-virginica')

plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1],marker='*'
            , c = 'Black', label = 'Centroids')

plt.legend()









